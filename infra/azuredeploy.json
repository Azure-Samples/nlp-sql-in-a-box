{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "16333608228133478182"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources (for example US EAST 2)"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group name"
      }
    },
    "principalId": {
      "type": "string",
      "metadata": {
        "description": "User's principal id"
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "description": "Tags to be used for all resources"
      }
    },
    "openaiName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OpenAI resource name"
      }
    },
    "sqlServerName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SQL Server resource name"
      }
    },
    "sqlDatabaseName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Database name"
      }
    },
    "administratorLogin": {
      "type": "string",
      "metadata": {
        "description": "Set the administrator login for the SQL Server"
      }
    },
    "ipAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "IP address to allow for SQL Server connection"
      }
    },
    "speechServiceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Speech service resource name"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesBing": "cog-bg",
      "cognitiveServicesOpenAI": "cog-oa-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesSpeech": "cog-sp-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "cognitiveServicesBot": "cog-bot-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des",
      "computeDisks": "disk",
      "computeDisksOs": "osdisk",
      "computeGalleries": "gal",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopics": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "iotHubComponents": "iot-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "machineLearningServicesComputeCPU": "mlcpu",
      "machineLearningServicesComputeGPU": "mlgpu-",
      "machineLearningServicesCluster": "mlclus-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "abbrs": "[variables('$fxv#0')]",
    "uniqueSuffix": "[substring(uniqueString(subscription().id, parameters('environmentName')), 1, 5)]",
    "names": {
      "resourceGroupName": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "openaiName": "[if(not(empty(parameters('openaiName'))), parameters('openaiName'), format('{0}{1}-{2}', variables('abbrs').cognitiveServicesOpenAI, parameters('environmentName'), variables('uniqueSuffix')))]",
      "speechServiceName": "[if(not(empty(parameters('speechServiceName'))), parameters('speechServiceName'), format('{0}{1}-{2}', variables('abbrs').cognitiveServicesSpeech, parameters('environmentName'), variables('uniqueSuffix')))]",
      "sqlServerName": "[if(not(empty(parameters('sqlServerName'))), parameters('sqlServerName'), format('{0}{1}-{2}', variables('abbrs').sqlServers, parameters('environmentName'), variables('uniqueSuffix')))]",
      "sqlDatabaseName": "[if(not(empty(parameters('sqlDatabaseName'))), parameters('sqlDatabaseName'), format('{0}{1}-{2}', variables('abbrs').sqlServersDatabases, parameters('environmentName'), variables('uniqueSuffix')))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2023-07-01",
      "name": "[variables('names').resourceGroupName]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_openai",
      "resourceGroup": "[variables('names').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "ipAddress": {
            "value": "[parameters('ipAddress')]"
          },
          "openaiName": {
            "value": "[variables('names').openaiName]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "8688028833357356624"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "ipAddress": {
              "type": "string"
            },
            "openaiName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('openaiName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "S0"
              },
              "kind": "OpenAI",
              "properties": {
                "customSubDomainName": "[parameters('openaiName')]",
                "apiProperties": {
                  "statisticsEnabled": false
                },
                "disableLocalAuth": true,
                "publicNetworkAccess": "[if(not(equals(parameters('ipAddress'), '')), 'Enabled', 'Disabled')]",
                "networkAcls": "[if(not(equals(parameters('ipAddress'), '')), createObject('defaultAction', 'Deny', 'ipRules', createArray(createObject('value', parameters('ipAddress')))), null())]"
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('openaiName'), 'gpt-4o')]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "gpt-4o",
                  "version": "2024-05-13"
                }
              },
              "sku": {
                "capacity": 10,
                "name": "Standard"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('principalId'), resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiName')), resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
              "properties": {
                "description": "User role assignment for OpenAI Service",
                "principalId": "[parameters('principalId')]",
                "principalType": "User",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiName'))]"
              ]
            }
          ],
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiName')), '2023-05-01').endpoint]"
            },
            "deploymentName": {
              "type": "string",
              "value": "gpt-4o"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('names').resourceGroupName)]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_speech",
      "resourceGroup": "[variables('names').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "ipAddress": {
            "value": "[parameters('ipAddress')]"
          },
          "speechServiceName": {
            "value": "[variables('names').speechServiceName]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "1243482995404149893"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "speechServiceName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "ipAddress": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2022-03-01",
              "name": "[parameters('speechServiceName')]",
              "location": "[parameters('location')]",
              "kind": "SpeechServices",
              "sku": {
                "name": "S0",
                "tier": "Standard"
              },
              "properties": {
                "customSubDomainName": "[parameters('speechServiceName')]",
                "disableLocalAuth": true,
                "publicNetworkAccess": "[if(not(equals(parameters('ipAddress'), '')), 'Enabled', 'Disabled')]",
                "networkAcls": "[if(not(equals(parameters('ipAddress'), '')), createObject('defaultAction', 'Deny', 'ipRules', createArray(createObject('value', parameters('ipAddress')))), null())]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('principalId'), resourceId('Microsoft.CognitiveServices/accounts', parameters('speechServiceName')), resourceId('Microsoft.Authorization/roleDefinitions', 'f2dc8367-1007-4938-bd23-fe263f013447'))]",
              "properties": {
                "description": "User role assignment for Speech Service",
                "principalId": "[parameters('principalId')]",
                "principalType": "User",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'f2dc8367-1007-4938-bd23-fe263f013447')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('speechServiceName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('speechServiceName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('names').resourceGroupName)]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_sql",
      "resourceGroup": "[variables('names').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "ipAddress": {
            "value": "[parameters('ipAddress')]"
          },
          "sqlServerName": {
            "value": "[variables('names').sqlServerName]"
          },
          "sqlDatabaseName": {
            "value": "[variables('names').sqlDatabaseName]"
          },
          "administratorLogin": {
            "value": "[parameters('administratorLogin')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "12306994777557947896"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "sqlServerName": {
              "type": "string"
            },
            "sqlDatabaseName": {
              "type": "string"
            },
            "ipAddress": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "administratorLogin": {
              "type": "securestring",
              "metadata": {
                "description": "Set the administrator login for the SQL Server"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2022-11-01-preview",
              "name": "[parameters('sqlServerName')]",
              "location": "[parameters('location')]",
              "properties": {
                "administrators": {
                  "login": "[parameters('administratorLogin')]",
                  "principalType": "User",
                  "azureADOnlyAuthentication": true,
                  "sid": "[parameters('principalId')]",
                  "tenantId": "[subscription().tenantId]"
                },
                "publicNetworkAccess": "[if(not(equals(parameters('ipAddress'), '')), 'Enabled', 'Disabled')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2022-11-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabaseName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('ipAddress'), ''))]",
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2020-11-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), 'AllowLocalConnection')]",
              "properties": {
                "startIpAddress": "[parameters('ipAddress')]",
                "endIpAddress": "[parameters('ipAddress')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            }
          ],
          "outputs": {
            "serverName": {
              "type": "string",
              "value": "[parameters('sqlServerName')]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('sqlDatabaseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('names').resourceGroupName)]"
      ]
    }
  ],
  "outputs": {
    "SQL_SERVER_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('names').resourceGroupName), 'Microsoft.Resources/deployments', 'deploy_sql'), '2022-09-01').outputs.serverName.value]"
    },
    "SQL_DATABASE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('names').resourceGroupName), 'Microsoft.Resources/deployments', 'deploy_sql'), '2022-09-01').outputs.databaseName.value]"
    },
    "SPEECH_SERVICE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('names').resourceGroupName), 'Microsoft.Resources/deployments', 'deploy_speech'), '2022-09-01').outputs.id.value]"
    },
    "AZURE_OPENAI_CHAT_DEPLOYMENT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('names').resourceGroupName), 'Microsoft.Resources/deployments', 'deploy_openai'), '2022-09-01').outputs.deploymentName.value]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('names').resourceGroupName), 'Microsoft.Resources/deployments', 'deploy_openai'), '2022-09-01').outputs.endpoint.value]"
    }
  }
}